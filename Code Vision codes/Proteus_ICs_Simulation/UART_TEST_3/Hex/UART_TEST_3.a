;#include <mega32a.h>
;PCODE: $00000000 VOL: 0
	#ifndef __SLEEP_DEFINED__
;PCODE: $00000001 VOL: 0
	#define __SLEEP_DEFINED__
;PCODE: $00000002 VOL: 0
	.EQU __se_bit=0x80
;PCODE: $00000003 VOL: 0
	.EQU __sm_mask=0x70
;PCODE: $00000004 VOL: 0
	.EQU __sm_powerdown=0x20
;PCODE: $00000005 VOL: 0
	.EQU __sm_powersave=0x30
;PCODE: $00000006 VOL: 0
	.EQU __sm_standby=0x60
;PCODE: $00000007 VOL: 0
	.EQU __sm_ext_standby=0x70
;PCODE: $00000008 VOL: 0
	.EQU __sm_adc_noise_red=0x10
;PCODE: $00000009 VOL: 0
	.SET power_ctrl_reg=mcucr
;PCODE: $0000000A VOL: 0
	#endif
;PCODE: $0000000B VOL: 0
;PCODE: $0000000C VOL: 0
;#include <delay.h>
;#include <stdlib.h>
;#include <stdio.h>
;
;#define F_CPU 11059200UL        /* Define frequency here its 8MHz */
;#define USART_BAUDRATE 9600
;#define BAUD_PRESCALE (((F_CPU / (USART_BAUDRATE * 16UL))) - 1)
;
;#define LED PORTB.0
;
;#define ON  1
;#define OFF 0
;
;
;void UART_init()
; 0000 0011 {

	.CSEG
;PCODE: $0000000D VOL: 0
;PCODE: $0000000E VOL: 0
; 0000 0012     UCSRB |= (1 << RXEN) | (1 << TXEN);    /* Turn on transmission and reception */
;PCODE: $0000000F VOL: 0
;PCODE: $00000010 VOL: 0
;PCODE: $00000011 VOL: 0
; 0000 0013     UCSRC |= (1 << URSEL) | (1 << UCSZ0) | (1 << UCSZ1);/* Use 8-bit char size */
;PCODE: $00000012 VOL: 0
;PCODE: $00000013 VOL: 0
;PCODE: $00000014 VOL: 0
; 0000 0014     UBRRL = BAUD_PRESCALE;            /* Load lower 8-bits of the baud rate */
;PCODE: $00000015 VOL: 0
;PCODE: $00000016 VOL: 0
; 0000 0015     UBRRH = (BAUD_PRESCALE >> 8);        /* Load upper 8-bits*/
;PCODE: $00000017 VOL: 0
;PCODE: $00000018 VOL: 0
; 0000 0016 }
;PCODE: $00000019 VOL: 0
;PCODE: $0000001A VOL: 0
;
;unsigned char UART_RxChar()
; 0000 0019 {
;PCODE: $0000001B VOL: 0
;PCODE: $0000001C VOL: 0
; 0000 001A     while ((UCSRA & (1 << RXC)) == 0);/* Wait till data is received */
;PCODE: $0000001D VOL: 0
;PCODE: $0000001E VOL: 0
;PCODE: $0000001F VOL: 0
;PCODE: $00000020 VOL: 0
;PCODE: $00000021 VOL: 0
;PCODE: $00000022 VOL: 0
; 0000 001B     return(UDR);            /* Return the byte*/
;PCODE: $00000023 VOL: 0
;PCODE: $00000024 VOL: 0
; 0000 001C }
;PCODE: $00000025 VOL: 0
;
;void UART_TxChar(char ch)
; 0000 001F {
;PCODE: $00000026 VOL: 0
;PCODE: $00000027 VOL: 0
; 0000 0020     while (! (UCSRA & (1<<UDRE)));    /* Wait for empty transmit buffer*/
;PCODE: $00000028 VOL: 0
;	ch -> Y+0
;PCODE: $00000029 VOL: 0
;PCODE: $0000002A VOL: 0
;PCODE: $0000002B VOL: 0
;PCODE: $0000002C VOL: 0
;PCODE: $0000002D VOL: 0
;PCODE: $0000002E VOL: 0
; 0000 0021     UDR = ch ;
;PCODE: $0000002F VOL: 0
;PCODE: $00000030 VOL: 0
; 0000 0022 }
;PCODE: $00000031 VOL: 0
;PCODE: $00000032 VOL: 0
;PCODE: $00000033 VOL: 0
;
;void UART_SendString(char *str)
; 0000 0025 {
;PCODE: $00000034 VOL: 0
;PCODE: $00000035 VOL: 0
; 0000 0026     unsigned char j=0;
; 0000 0027 
; 0000 0028     while (str[j]!=0)        /* Send string till null */
;PCODE: $00000036 VOL: 0
;PCODE: $00000037 VOL: 0
;	*str -> Y+1
;	j -> R17
;PCODE: $00000038 VOL: 0
;PCODE: $00000039 VOL: 0
;PCODE: $0000003A VOL: 0
;PCODE: $0000003B VOL: 0
;PCODE: $0000003C VOL: 0
;PCODE: $0000003D VOL: 0
;PCODE: $0000003E VOL: 0
;PCODE: $0000003F VOL: 0
; 0000 0029     {
; 0000 002A         UART_TxChar(str[j]);
;PCODE: $00000040 VOL: 0
;PCODE: $00000041 VOL: 0
;PCODE: $00000042 VOL: 0
;PCODE: $00000043 VOL: 0
; 0000 002B         j++;
;PCODE: $00000044 VOL: 0
;PCODE: $00000045 VOL: 0
; 0000 002C     }
;PCODE: $00000046 VOL: 0
;PCODE: $00000047 VOL: 0
; 0000 002D }
;PCODE: $00000048 VOL: 0
;PCODE: $00000049 VOL: 0
;PCODE: $0000004A VOL: 0
;PCODE: $0000004B VOL: 0
;PCODE: $0000004C VOL: 0
;
;void main()
; 0000 0030 {
;PCODE: $0000004D VOL: 0
; 0000 0031     char c[2];
; 0000 0032     UART_init();
;PCODE: $0000004E VOL: 0
;	c -> Y+0
;PCODE: $0000004F VOL: 0
; 0000 0033     DDRB = 0xff;
;PCODE: $00000050 VOL: 0
;PCODE: $00000051 VOL: 0
; 0000 0034     PORTB = 0x00;
;PCODE: $00000052 VOL: 0
;PCODE: $00000053 VOL: 0
; 0000 0035        LED = ON;
;PCODE: $00000054 VOL: 0
;PCODE: $00000055 VOL: 0
; 0000 0036     delay_ms(1000);
;PCODE: $00000056 VOL: 0
;PCODE: $00000057 VOL: 0
; 0000 0037     LED = OFF;
;PCODE: $00000058 VOL: 0
;PCODE: $00000059 VOL: 0
; 0000 0038     //UART_SendString("\n\t Echo Test ");
; 0000 0039     while(1)
;PCODE: $0000005A VOL: 0
; 0000 003A     {
; 0000 003B         UART_init();
;PCODE: $0000005B VOL: 0
; 0000 003C         c[0] = UART_RxChar();
;PCODE: $0000005C VOL: 0
;PCODE: $0000005D VOL: 0
; 0000 003D         UART_TxChar(c[0]);
;PCODE: $0000005E VOL: 0
;PCODE: $0000005F VOL: 0
; 0000 003E 
; 0000 003F         if(c[0]== '1'){
;PCODE: $00000060 VOL: 0
;PCODE: $00000061 VOL: 0
;PCODE: $00000062 VOL: 0
; 0000 0040           LED = ON;
;PCODE: $00000063 VOL: 0
;PCODE: $00000064 VOL: 0
; 0000 0041         }
; 0000 0042         else if(c[0]== '2'){
;PCODE: $00000065 VOL: 0
;PCODE: $00000066 VOL: 0
;PCODE: $00000067 VOL: 0
;PCODE: $00000068 VOL: 0
;PCODE: $00000069 VOL: 0
; 0000 0043           LED = OFF;
;PCODE: $0000006A VOL: 0
;PCODE: $0000006B VOL: 0
; 0000 0044         }
; 0000 0045         //UART_SendString("4");
; 0000 0046         //UART_SendString("0");
; 0000 0047         //UART_SendString("0");
; 0000 0048         //UART_SendString("7");
; 0000 0049         //UART_SendString(c);
; 0000 004A         //UART_SendString("\r \n");
; 0000 004B         //delay_ms(1000);
; 0000 004C     }
;PCODE: $0000006C VOL: 0
;PCODE: $0000006D VOL: 0
;PCODE: $0000006E VOL: 0
;PCODE: $0000006F VOL: 0
; 0000 004D }
;PCODE: $00000070 VOL: 0
;PCODE: $00000071 VOL: 0
;PCODE: $00000072 VOL: 0
;PCODE: $00000073 VOL: 0
